name: OTA Integration CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/ota-integration-service/**'
      - 'infrastructure/k8s/ota/**'
      - '.github/workflows/ota-integration.yml'
  pull_request:
    branches: [main]
    paths:
      - 'services/ota-integration-service/**'
      - 'infrastructure/k8s/ota/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ota-integration

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/ota-integration-service/package-lock.json

      - name: Install dependencies
        run: |
          cd services/ota-integration-service
          npm ci

      - name: Run linting
        run: |
          cd services/ota-integration-service
          npm run lint

      - name: Run tests
        run: |
          cd services/ota-integration-service
          npm run test:coverage
        env:
          NODE_ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          BOOKING_API_KEY: ${{ secrets.BOOKING_API_KEY_TEST }}
          HOSTELWORLD_API_KEY: ${{ secrets.HOSTELWORLD_API_KEY_TEST }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: services/ota-integration-service/coverage/lcov.info
          flags: ota-integration
          name: ota-integration-coverage

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'services/ota-integration-service'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/ota-integration-service
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          # Update image tag in deployment
          sed -i "s|your-registry/ota-integration:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop|g" infrastructure/k8s/ota/ota-integration-deployment.yaml
          
          # Apply configurations
          kubectl apply -f infrastructure/k8s/ota/ -n staging
          
          # Wait for rollout to complete
          kubectl rollout status deployment/ota-integration-service -n staging --timeout=300s

      - name: Run integration tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=ota-integration -n staging --timeout=120s
          
          # Get service URL
          SERVICE_URL=$(kubectl get service ota-integration-service -n staging -o jsonpath='{.spec.clusterIP}')
          
          # Run health check
          kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never -n staging -- \
            curl -f http://$SERVICE_URL:3003/health

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          # Update image tag in deployment
          sed -i "s|your-registry/ota-integration:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" infrastructure/k8s/ota/ota-integration-deployment.yaml
          
          # Apply configurations
          kubectl apply -f infrastructure/k8s/ota/ -n production
          
          # Wait for rollout to complete
          kubectl rollout status deployment/ota-integration-service -n production --timeout=600s

      - name: Verify deployment
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=ready pod -l app=ota-integration -n production --timeout=300s
          
          # Get service URL and run health check
          SERVICE_URL=$(kubectl get service ota-integration-service -n production -o jsonpath='{.spec.clusterIP}')
          
          kubectl run verify-pod --image=curlimages/curl:latest --rm -i --restart=Never -n production -- \
            curl -f http://$SERVICE_URL:3003/health

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'OTA Integration Service deployed successfully to production! üöÄ'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'OTA Integration Service deployment to production failed! ‚ùå'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK